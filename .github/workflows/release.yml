name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  build-linux:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y

      - name: Configure with CMake
        run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        run: cmake --build . --config Release

      - name: Run tests
        run: cmake --build . --target test --config Release

      - name: Create package
        run: cmake --build . --target package --config Release

  build-windows:
    runs-on: windows-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install vcpkg dependencies
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install boost-test 
        shell: bash

      - name: Configure Cmake
        run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
        shell: cmd

      - name: Build project
        run: cmake --build . --config Release
        shell: cmd

      - name: Run tests
        run: ctest -C Release
        shell: cmd

      - name: Create package (ZIP)
        run: |
          mkdir ./package
          copy helloworld*.exe ./package/
          copy README.md ./package/
          7z a helloworld-0.0.${{ github.run_number }}-Windows.zip .\package\*
        shell: cmd

  create-release:
      runs-on: ubuntu-latest
      needs: [build-linux, build-windows]
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/github_actions')
      permissions: write-all
      steps:
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: v0.0.${{ github.run_number }}
            release_name: Release v0.0.${{ github.run_number }}
            draft: false
            prerelease: false
            body: |
              Automated release built from ${{ github.sha }}
              
              **Assets:**
              - Linux Debian package
              - Windows ZIP package
              
              Built by GitHub Actions run #${{ github.run_number }}
        
        - name: Upload Linux Release Asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
            asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
            asset_content_type: application/vnd.debian.binary-package
        
        - name: Upload Windows Release Asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./helloworld-0.0.${{ github.run_number }}-Windows.zip
            asset_name: helloworld-0.0.${{ github.run_number }}-Windows.zip
            asset_content_type: application/zip
